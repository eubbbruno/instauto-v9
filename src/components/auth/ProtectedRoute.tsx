"use client";

import { useAuth } from '@/contexts/SupabaseAuthContext';
import { useRouter } from 'next/navigation';
import { useEffect, ReactNode, useState } from 'react';
import LoadingSpinner from '@/components/LoadingSpinner';
import { supabase, isSupabaseConfigured } from '@/lib/supabase';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredUserType?: 'motorista' | 'oficina';
  fallbackPath?: string;
}

export default function ProtectedRoute({ 
  children, 
  requiredUserType,
  fallbackPath = '/auth'
}: ProtectedRouteProps) {
  const { user, loading } = useAuth();
  const router = useRouter();
  const [supabaseLoading, setSupabaseLoading] = useState(true);
  const [hasSupabaseSession, setHasSupabaseSession] = useState(false);

  // Verificar sess√£o Supabase diretamente (para OAuth)
  useEffect(() => {
    const checkSupabaseSession = async () => {
      if (!isSupabaseConfigured() || !supabase) {
        setSupabaseLoading(false);
        return;
      }

      try {
        const { data: { session } } = await supabase.auth.getSession();
        console.log('üîç [PROTECTED] Verificando sess√£o Supabase:', !!session);
        setHasSupabaseSession(!!session);
      } catch (error) {
        console.error('‚ùå [PROTECTED] Erro ao verificar sess√£o:', error);
        setHasSupabaseSession(false);
      } finally {
        setSupabaseLoading(false);
      }
    };

    checkSupabaseSession();
  }, []);

  useEffect(() => {
    // Aguardar tanto o contexto quanto a verifica√ß√£o direta do Supabase
    if (!loading && !supabaseLoading) {
      console.log('üîç [PROTECTED] Estado completo:', { 
        user: !!user, 
        userName: user?.name,
        userType: user?.type,
        hasSupabaseSession, 
        requiredUserType,
        currentPath: window.location.pathname,
        fallbackPath
      });

      // Se tem sess√£o Supabase mas n√£o tem user no contexto, aguardar mais um pouco
      if (hasSupabaseSession && !user) {
        console.log('‚è≥ [PROTECTED] RACE CONDITION DETECTADA: Aguardando contexto carregar usu√°rio...');
        console.log('üìä [PROTECTED] Debugging info:', {
          hasSupabaseSession,
          userFromContext: !!user,
          loadingContext: loading,
          loadingSupabase: supabaseLoading
        });
        
        setTimeout(() => {
          // Verificar novamente ap√≥s delay
          if (!user) {
            console.log('‚ö†Ô∏è [PROTECTED] TIMEOUT: Contexto n√£o carregou ap√≥s 3 segundos, redirecionando...');
            router.push(fallbackPath);
          } else {
            console.log('‚úÖ [PROTECTED] Contexto carregou com sucesso ap√≥s delay!');
          }
        }, 3000); // Aumentar para 3 segundos
        return;
      }

      // Se n√£o tem sess√£o Supabase E n√£o tem user no contexto, redirecionar
      if (!hasSupabaseSession && !user) {
        console.log('‚ùå [PROTECTED] Sem autentica√ß√£o, redirecionando para:', fallbackPath);
        router.push(fallbackPath);
        return;
      }

      // Se tem user mas tipo n√£o corresponde
      if (user && requiredUserType && user.type !== requiredUserType) {
        console.log('‚ö†Ô∏è [PROTECTED] Tipo incorreto, redirecionando...');
        const userDashboard = user.type === 'oficina' ? '/oficina-basica' : '/motorista';
        router.push(userDashboard);
        return;
      }

      console.log('‚úÖ [PROTECTED] Acesso autorizado');
    }
  }, [user, loading, supabaseLoading, hasSupabaseSession, router, requiredUserType, fallbackPath]);

  // Mostrar loading enquanto verifica autentica√ß√£o
  if (loading || supabaseLoading) {
    console.log('‚è≥ [PROTECTED] Carregando...', { loading, supabaseLoading });
    return <LoadingSpinner />;
  }

  // Se tem sess√£o Supabase mas contexto ainda n√£o carregou, aguardar
  if (hasSupabaseSession && !user) {
    console.log('‚è≥ [PROTECTED] Aguardando contexto...');
    return <LoadingSpinner />;
  }

  // Se n√£o tem sess√£o nem user, n√£o renderizar (vai redirecionar)
  if (!hasSupabaseSession && !user) {
    return <LoadingSpinner />;
  }

  // Se tem restri√ß√£o de tipo e n√£o corresponde, n√£o renderizar
  if (user && requiredUserType && user.type !== requiredUserType) {
    return <LoadingSpinner />;
  }

  console.log('üéâ [PROTECTED] Renderizando conte√∫do protegido');
  return <>{children}</>;
} 