-- üîç VERIFICA√á√ÉO COMPLETA DO ESTADO DO BANCO
-- Execute este script para diagnosticar problemas de redirecionamento

-- ==================================================
-- üìä STEP 1: VERIFICAR ESTRUTURA B√ÅSICA
-- ==================================================

-- Verificar se as tabelas existem
SELECT 
    'üìã TABELAS EXISTENTES' as categoria,
    table_name,
    CASE 
        WHEN table_name IN ('profiles', 'drivers', 'workshops') THEN '‚úÖ ESSENCIAL'
        ELSE 'üì¶ ADICIONAL'
    END as status
FROM information_schema.tables 
WHERE table_schema = 'public'
ORDER BY table_name;

-- Verificar se a fun√ß√£o handle_new_user existe
SELECT 
    '‚öôÔ∏è FUN√á√ÉO HANDLE_NEW_USER' as categoria,
    CASE 
        WHEN EXISTS(
            SELECT 1 FROM information_schema.routines 
            WHERE routine_name = 'handle_new_user' AND routine_schema = 'public'
        ) THEN '‚úÖ EXISTE'
        ELSE '‚ùå N√ÉO EXISTE'
    END as status;

-- Verificar se o trigger existe
SELECT 
    'üîó TRIGGER AUTH' as categoria,
    CASE 
        WHEN EXISTS(
            SELECT 1 FROM information_schema.triggers 
            WHERE trigger_name = 'on_auth_user_created'
        ) THEN '‚úÖ ATIVO'
        ELSE '‚ùå INATIVO'
    END as status;

-- ==================================================
-- üë• STEP 2: VERIFICAR USU√ÅRIOS EXISTENTES
-- ==================================================

-- Contar usu√°rios por tipo
SELECT 
    'üë• USU√ÅRIOS POR TIPO' as categoria,
    COALESCE(p.type, 'SEM_PROFILE') as tipo,
    COUNT(*) as quantidade
FROM auth.users u
LEFT JOIN public.profiles p ON u.id = p.id
GROUP BY p.type
ORDER BY quantidade DESC;

-- Verificar usu√°rios com problemas (sem profile)
SELECT 
    '‚ö†Ô∏è USU√ÅRIOS SEM PROFILE' as categoria,
    u.id,
    u.email,
    u.created_at,
    u.raw_user_meta_data
FROM auth.users u
LEFT JOIN public.profiles p ON u.id = p.id
WHERE p.id IS NULL
ORDER BY u.created_at DESC;

-- Verificar oficinas sem workshop
SELECT 
    '‚ö†Ô∏è OFICINAS SEM WORKSHOP' as categoria,
    p.id,
    p.email,
    p.name,
    p.type
FROM public.profiles p
LEFT JOIN public.workshops w ON p.id = w.profile_id
WHERE p.type = 'oficina' AND w.id IS NULL
ORDER BY p.created_at DESC;

-- Verificar motoristas sem driver
SELECT 
    '‚ö†Ô∏è MOTORISTAS SEM DRIVER' as categoria,
    p.id,
    p.email,
    p.name,
    p.type
FROM public.profiles p
LEFT JOIN public.drivers d ON p.id = d.profile_id
WHERE p.type = 'motorista' AND d.id IS NULL
ORDER BY p.created_at DESC;

-- ==================================================
-- üéØ STEP 3: VERIFICAR PLANOS DE OFICINAS
-- ==================================================

-- Verificar planos das oficinas
SELECT 
    'üìä PLANOS DAS OFICINAS' as categoria,
    COALESCE(w.plan_type, 'SEM_PLANO') as plano,
    COUNT(*) as quantidade
FROM public.profiles p
LEFT JOIN public.workshops w ON p.id = w.profile_id
WHERE p.type = 'oficina'
GROUP BY w.plan_type
ORDER BY quantidade DESC;

-- Listar oficinas com seus planos
SELECT 
    'üè¢ OFICINAS E PLANOS' as categoria,
    p.email,
    p.name,
    COALESCE(w.plan_type, 'SEM_PLANO') as plano,
    w.created_at
FROM public.profiles p
LEFT JOIN public.workshops w ON p.id = w.profile_id
WHERE p.type = 'oficina'
ORDER BY w.created_at DESC;

-- ==================================================
-- üîí STEP 4: VERIFICAR POL√çTICAS RLS
-- ==================================================

-- Contar pol√≠ticas RLS
SELECT 
    'üîí POL√çTICAS RLS' as categoria,
    schemaname,
    tablename,
    COUNT(*) as quantidade_politicas
FROM pg_policies 
WHERE schemaname = 'public'
GROUP BY schemaname, tablename
ORDER BY tablename;

-- Listar todas as pol√≠ticas
SELECT 
    'üìã LISTA DE POL√çTICAS' as categoria,
    schemaname || '.' || tablename as tabela,
    policyname as politica,
    cmd as comando
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- ==================================================
-- üö® STEP 5: IDENTIFICAR PROBLEMAS ESPEC√çFICOS
-- ==================================================

-- Verificar se h√° usu√°rios com metadata incorreto
SELECT 
    'üîç METADATA INCORRETO' as categoria,
    u.id,
    u.email,
    u.raw_user_meta_data->>'type' as metadata_type,
    p.type as profile_type,
    CASE 
        WHEN u.raw_user_meta_data->>'type' != p.type THEN '‚ùå INCONSISTENTE'
        WHEN u.raw_user_meta_data->>'type' IS NULL THEN '‚ö†Ô∏è SEM METADATA'
        ELSE '‚úÖ OK'
    END as status
FROM auth.users u
LEFT JOIN public.profiles p ON u.id = p.id
WHERE p.id IS NOT NULL
ORDER BY u.created_at DESC;

-- Verificar oficinas sem plan_type
SELECT 
    'üè¢ OFICINAS SEM PLAN_TYPE' as categoria,
    p.id,
    p.email,
    p.name,
    w.plan_type
FROM public.profiles p
JOIN public.workshops w ON p.id = w.profile_id
WHERE p.type = 'oficina' AND (w.plan_type IS NULL OR w.plan_type = '')
ORDER BY p.created_at DESC;

-- ==================================================
-- üí° STEP 6: RECOMENDA√á√ïES DE CORRE√á√ÉO
-- ==================================================

-- Gerar relat√≥rio final
SELECT 
    'üìã RELAT√ìRIO FINAL' as categoria,
    'Verifique os resultados acima para identificar problemas' as instrucao,
    'Execute as corre√ß√µes necess√°rias baseadas nos achados' as proxima_acao;

-- Verificar se precisa executar limpeza total
SELECT 
    'üßπ RECOMENDA√á√ÉO' as categoria,
    CASE 
        WHEN EXISTS(
            SELECT 1 FROM auth.users u
            LEFT JOIN public.profiles p ON u.id = p.id
            WHERE p.id IS NULL
        ) THEN '‚ùå EXECUTE: limpeza-total-banco.sql'
        ELSE '‚úÖ BANCO PARECE OK'
    END as acao_recomendada;

-- ==================================================
-- üîß STEP 7: QUERIES PARA CORRE√á√ÉO MANUAL
-- ==================================================

-- Template para corrigir usu√°rios sem profile
/*
-- EXECUTE APENAS SE NECESS√ÅRIO:
INSERT INTO public.profiles (id, email, name, type)
SELECT 
    u.id,
    u.email,
    COALESCE(u.raw_user_meta_data->>'name', split_part(u.email, '@', 1)),
    COALESCE(u.raw_user_meta_data->>'type', 'motorista')
FROM auth.users u
LEFT JOIN public.profiles p ON u.id = p.id
WHERE p.id IS NULL;
*/

-- Template para corrigir oficinas sem workshop
/*
-- EXECUTE APENAS SE NECESS√ÅRIO:
INSERT INTO public.workshops (profile_id, plan_type)
SELECT 
    p.id,
    'free'
FROM public.profiles p
LEFT JOIN public.workshops w ON p.id = w.profile_id
WHERE p.type = 'oficina' AND w.id IS NULL;
*/

-- Template para corrigir motoristas sem driver
/*
-- EXECUTE APENAS SE NECESS√ÅRIO:
INSERT INTO public.drivers (profile_id)
SELECT 
    p.id
FROM public.profiles p
LEFT JOIN public.drivers d ON p.id = d.profile_id
WHERE p.type = 'motorista' AND d.id IS NULL;
*/

/*
üéØ COMO USAR ESTE SCRIPT:

1. Execute no Supabase SQL Editor
2. Analise os resultados de cada se√ß√£o
3. Identifique problemas espec√≠ficos
4. Use as queries de corre√ß√£o se necess√°rio
5. Ou execute limpeza-total-banco.sql se muitos problemas

üö® PROBLEMAS COMUNS:
- Usu√°rios sem profile ‚Üí Fun√ß√£o handle_new_user n√£o funcionou
- Oficinas sem workshop ‚Üí L√≥gica de cria√ß√£o com erro
- Motoristas sem driver ‚Üí Mesmo problema acima
- Planos incorretos ‚Üí Metadata n√£o foi processado corretamente
*/ 